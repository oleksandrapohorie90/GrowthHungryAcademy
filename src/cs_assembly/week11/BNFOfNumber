<expression> ::= <operator> <operand> <operand>

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<operator> ::= "+" | "-"
<integer> ::= <one_to_nine> | <digit> <integer>
<fraction> ::= "." <integer>
<exponent> ::= ("e" | "E") <sign>? <integer>
<number> ::= <sign>? <integer> <fraction>? <exponent>?


BNF form of a number:
=============================
**NOTE: no support for exponents
everything on the left I define it
key on the left value on the right

Number: [sign] digits [fraction part] -2,3,3,3.3,-45.56,5.0,0.5

<number> ::= <integer>[<fractional>]
<fractional> ::= "."<digit>+
<integer> ::= ["-"](<one_to_nine>{digit}|"0")
<digit> ::= "0"|<one_to_nine>
<one_to_nine>::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

1-3 5+6 -2 , multipl and div has to be first
BNF forms - read
extending arithmetic language

assignment, control structure, expression or print

<expression> :;= <assignment>|<control structure>|print <expression>;what do we print>smth equl smth
<assignment> ::=<identifier>"="expression;
<identifier> ::= cannot be any extra symbols look at if and then what

a BNF form
