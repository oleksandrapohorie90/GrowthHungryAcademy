1. Check if Array is Sorted: Implement a function that checks whether an array is sorted
in ascending order and returns a boolean value (0 for false, 1 for true).

bool isSorted(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        if (arr[i] > arr[i + 1]) {
            return false; // If any element is greater than its next element, return false
        }       return true; // Return true if the loop completes without finding out-of-order elements
    }
}

2. Find Maximum Element: Implement a function to find and return the maximum value
   in an integer array

int findMax(int arr[], int size) {
    // Initialize max to the first element of the array
    int max = arr[0]; //we will be comparing with this element

    // Iterate through the array elements
    for (int i = 1; i < size; i++) { //start with 2nd element arr[1] since we already comparing to arr[0]=max
        // Update max if current element is greater
        if (arr[i] > max) {        => The function then iterates through the array starting from the second element (i = 1).
                                      For each element, it compares it with the current maximum (max).
                                      If the current element is greater than max, it updates max to the value of the current element.
            max = arr[i];
        }
    }
    // Return the maximum value found
    return max;
}

3. Linear Search: Write a function that performs a linear search on an array. The function
   should return the index of the first occurrence of a specified value, or -1 if the value is not
   found.

   int linearSearch(int arr[], int size, int target) {
       // Iterate through the array elements
       for (int i = 0; i < size; i++) {
           // Check if the current element matches the target value
           if (arr[i] == target) {
               // Return the index of the first occurrence of the target value
               return i;
           }
       }
       // If the target value is not found, return -1
       return -1;
   }





