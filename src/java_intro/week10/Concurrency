ability of a program to execute multiple tasks simultaneously
-minim CPU usage
-faster task completion
don't control execution order, you don't know what order of threads execution
Challenges of Threading
=======================
Data race is a type of race condition that occurs when 2 or more threads access a shared var concurrently, and at least 1 of the accesses is a write operation. This leads to data corruption.

Deadlocks - condition where improper structure program can get into where execution cant proceed. threads are waiting for execution but cant proceed.
-use consisting locking
-avoid nested locks
-use tryLock to prevent indefinite blocking
===========================================
Concurrency utilities in Java
-tools, mechanisms to manage multi-threading programming

Locks: provide THREAD synchronisation by controlling access to critical sections
    a.ReentrantLock:same thread to acquire th lock multiple times
    b.ReadWriteLock:separates read and write access for better performance
**increment operations can be protected by the lock
**useful for section of code to execute 1 at a time and not multiple in the same time
===========================

Semaphores: limit the number of threads accessing a resource simultaneously**
-limiting concurrent access to shared resources(DB connections)
-thread signaling and coordination
-create a semaphore and set the limit of concurrent connections in the same time
==================
Concurrent collections : no explicit synchronization required
ConcurrentHashMap
CopyOnWriteArrayList
BlockingQueue
they are not free, performance overhead, computation, its not optimal, but if performance is not a restriction we can use them
==================================================================
java-multithreading course
Semaphore - managing, limiting number of concurrent customers
Blocking Queue - for placing, processing orders
ReentrantLock - protecting an int variable

