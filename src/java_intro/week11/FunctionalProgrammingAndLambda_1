1. Functional programming
-introduced in java 8
-declarative coding style - specify and set relationships and program takes care of it
-improves thread safety in concurrent applications

1.1. List<Integer> numbers = List.of(1,2,3); //Immutable List
Attempt to modify: UnsupportedOperationException
1.2. Statelessness
Function<Integer,Integer> square = x -> x*x;
system.out.println(square.apply(4)); always 16
For a given input it always return the same output, no random nums, no dependency

1.3. Higher order functions
functions that accept other functions as parameter or return them
List<String> names = List.of("Alice","Bob", "Charlie");
names.stream()
    .filter(name->name.startsWith("A"))
    .forEach(System.out::println);

1.4. @FunctionalInterface - with single abstract method
Predicate<T> - filters a collection
Consumer<T> - logging or printing
Function<T,R> - mapping data
Supplier<T> - generate random

2. Lambda
anonymous function to simplify code
(parameters) -> expression x-> x*x; (a,b)-> a+b; (x,y) -> {int sum = x+y; return sum;}
(parameters) -> {statements;}

3. Stream - you can transform collections/lists in the list instead of do methods for map, filter, sorted

List<String> names = Arrays.asList("Alice","Bob", "Charlie");
names.stream()
    .filter(name-> name.startsWith("A"))
    .forEach(System.out::println);

List<Integer> numbers = List.of(1,2,3);
numbers.forEach(n -> System.out.println(n));

Predicate Example
===================
Predicate<Integer> isEven = n -> n%2 == 0;

List<Integer> evenNumbers = numbers.stream()
                          .filter(isEven)
                          .collect(Collectors.toList());

Consumer Example
====================
Consumer<String> logger = System.out::println;
list.forEach(logger);


Function Example
=====================
Function<String,Integer> lengthFunction = String::length;
List<Integer> lengths = words.stream().map(lengthFunction).collect(Collectors.toList());


Comparator Example
======================
List<String> names = Arrays.asList("Zoe","Alice", "John");
names.sort((a,b) -> a.compareTo(b));

Supplier Example
=======================
Supplier<Double> randomSupplier = Math::random;
System.out.println(randomSupplier.get);


Lambdas w/ Threads
===================
new Thread(() -> System.out.println("Hello from Thread")).start();


Real world example
=======================
Scenario: Filter, transform and print a list of employees on salary.
employees.stream()
         .filter(e->e.getSalary()>50000)
         .map(Employee::getName)
         .forEach(System.out.println);

