JDBC
● What is JDBC?
● Java Database Connectivity (JDBC) is a Java API that enables Java
applications to interact with databases.
● Provides a standard interface for connecting to and executing SQL
statements on various databases.
Why JDBC
● Cross-platform compatibility.
● Simplifies database operations within Java applications.
● Provides a consistent interface for different types of databases.
JDBC Architecture
● JDBC API:
○ Defines classes and interfaces for managing connections, executing SQL queries, and
handling results.
● JDBC Driver:
○ Software component that enable Java applications to interact with database.
○ Dedicated driver/s for different databases (MySQL, PostgreSQL, SQLite)
How JDBC drivers work
1. Loading the Driver: Java application loads the appropriate JDBC driver
class.
2. Establishing connection: the driver establishes a connection to the
database using the provided connection details (e.g. URL).
3. Executing queries: driver sends SQL queries and receives results.
4. Processing results: the driver processes the results and returns them to the
Java application.
5. Closing connection: The driver closes the database connection to release
resources

Adding SQLite JDBC Driver as a dependency
● Project settings -> Libraries
● Add->Maven
● Add `org.xerial:sqlite-jdbc:3.46.0.1`
Maven repositories
● A Central Hub for Java Libraries
○ Repository of Java libraries and their dependencies. It stores compiled code, documentation, and
other artifacts that can be reused in various Java projects.
● Types of Maven Repositories:
○ Local Repository: directory on your local machine where Maven stores downloaded artifacts. Caches
downloaded dependencies, speeding up subsequent builds.
● Remote Repositories:
○ Central Repository: The primary repository for most open-source Java libraries. It's managed by the
Apache Software Foundation.
○ Third-party Repositories: Repositories hosted by organizations like Google, Spring, or other
companies.
○ Private Repositories: Repositories hosted by organizations to store internal libraries or proprietary
artifacts.
[Optional] Database navigator plugin for IntelliJ
● https://plugins.jetbrains.com/plugin/1800-database-navigator

Connecting to a database
try {
String url = "jdbc:sqlite:C:/Users/kalas/sql/app.db";
Connection conn = DriverManager.getConnection(url);
} catch (SQLException er) {
System.out.println("An error occurred while connecting SQLite database");
}
Working with Statements
JDBC statements are objects that represent SQL queries or commands that are
executed against a database
Statement: Basic SQL queries without parameters.
PreparedStatement: SQL queries with parameters.
CallableStatement: Calls to stored procedures.
Working with Statements
JDBC statements are objects that represent SQL queries or commands that are
executed against a database
Statement: Basic SQL queries without parameters. Less efficient for repeated
queries. Vulnerable to SQL injection.
PreparedStatement: SQL queries with parameters. More efficient for repeated
queries. Resistant to SQL injection.
CallableStatement: Calls to stored procedures. Can be efficient for complex
database operations. Resistant to SQL injection.

PreparedStatement example
Connection conn = DriverManager.getConnection(url);
String sql = "INSERT INTO users (name, age) VALUES (?, ?)";
pstmt = conn.prepareStatement(sql);
pstmt.setString(1, "Alice");
pstmt.setInt(2, 30);
pstmt.executeUpdate();
pstmt.setString(1, "Bob");
pstmt.setInt(2, 25);
pstmt.executeUpdate();
pstmt.close();
ResultSet
ResultSet is essentially a table of data representing a database result set, which is
usually generated by executing a statement that queries the database.
Example:
while (resultSet.next()) {
String name = resultSet.getString("name");
int age = resultSet.getInt("age");
}

What is Try-with-Resources
Try-with-Resources is a Java language feature introduced in Java 7 that simplifies
resource management, especially for resources that implement the AutoCloseable
interface. It ensures that resources are automatically closed when the try block
exits, regardless of whether an exception is thrown.
Simplifies code: Eliminates the need for explicit finally blocks to close resources.
Prevents resource leaks: Guarantees that resources are closed even if
exceptions occur.
Improves code readability: Makes code more concise and easier to understand.
Try-with-Resources example
try (Resource1 resource1 = ...) {
// Use the resource here
} catch (Exception e) {
// Handle exceptions
}
Try-with-Resources and JDBC
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
// Use the ResultSet here
} catch (SQLException e) {
e.printStackTrace();
}
References
● https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
