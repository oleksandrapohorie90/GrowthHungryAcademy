Recursion has 2 phases:
void fun(int n)
{
    if (n>0)
    {
    1. Calling time -> Ascending
    2. fun(n-1)*2
    3. Returning time -> Descending
    }
}

Recursion with loop -  only will have ascending phase
Recursion without - will have both

Leaving main function, if you count activation records, how many records - only for that function 4, so size of Stack=4, how much MEMORY its consuming, each activation call has 1 var created - Call n+1, total memory consumed O(n) not n+1, bc we write degree and highest term

void fun(int n){
if(n>0)}
print("n")
fun(n-1)
}
}
void main{
int x=3;
fun(x);
}
How Stack is created and utilized in Recursion ?
==============================================
Heap

Stack
5. fun executed now n=0, no print, bc n=0 <-activation call deleted and control goes back to previous call, but there is nothing after line 19 so nothing happens-nothing to DO

4. fun executed now n=1 print, bc n>0  <-activation call deleted and control goes back to previous call, but there is nothing after line 19 so nothing happens-nothing to DO

3. fun executed now n=2 print, bc n>0  <-activation call deleted and control goes back to previous call, but there is nothing after line 19 so nothing happens-nothing to DO

2. fun executed now n=3 print, bc n>0  <-activation call deleted and control goes back to previous call, but there is nothing after line 19 so nothing happens-nothing to DO

1. main function - finally goes back to main, but there is nothing after line 24 so also activation call deleted
x=3

Code

===================================================
Time Complexity
In Recursion Tree Total time - 3 units of time if n=3
So, the time depends on the value Im passing - O(n)
=================================================
1.Tail recursion - no operations to be done while returning time
loop is more efficient then tail recursion
2.Head Recursion - all of operations are done at the time of returning
3. Linear recursion - when recursion is called itself 1 time
4. tree recursion - when a reursion is calling itself more than 1 time
