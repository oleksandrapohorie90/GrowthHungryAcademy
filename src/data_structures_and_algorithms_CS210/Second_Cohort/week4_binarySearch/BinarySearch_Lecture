for binary search you need to define the search space:
indeces of the array
min possible index = 0
max possible index = n-1
===========================> BOUNDARIES
next while loop
======================> until when your binary search executes, until we exhaust search space, tehre are numbs btw left and right, until this interval contains at least 1 element we keep search, after condition breaks we exit the loop, then binary search is concluded and we stop

at each step of binary search-you compute middle element in your remaining search space and everything has to do with this middle element
based on this middle element - you either continue searching in left half search space or continue searching in right half

**Find any index of X in a sorted(ascending) array of numbers:

int left=0;
int right = n-1;

while(left<=right){
int middle = (left+right)/2;
    if(nums[middle] == x){
    return middle; //we found it
    }

    if(nums[middle]<x){
    //search in the right part [middle+1; right]
    left=middle+1;
    }

    else{
    //x<nums[middle]
    //search in the left [left; middle-1]
    right = middle - 1;
    }
}
couldn't find it
return -1;

**Find the left most entry of number X in a sorted array of numbers:
//we have an arr of nums of length n(nums[0...n-1]) sorted in an ascending order
//lets find an integer x in nums and return its leftmost index or return -1 if it is not present

int left = 0;
int right = n-1;
int answer = -1;
while(left<=right){
int middle = (left+right)/2;
    if(nums[middle]>x){
    //keep searching in the left part [left; middle-1]
    right = middle-1;
    } else if (nums[middle] == x){
    //potential answer lets save answer = middle and keep searching in the left part [left; middle-1]
    answer = middle;
    right = middle-1;
    } else { //nums[middle] < x
    //keep searching in the right part [middle + 1; right]
    left = middle +1;

  }
    }
    return answer; //left most entry for example if index 8 and 9 both have number 8 then the answer should be index 8 since it is the left most entry


**Find the right most entry of number X in a sorted array of numbers:
//we have an arr of nums of length n(nums[0...n-1]) sorted in an ascending order
//lets find an integer x in nums and return its right most index or return -1 if it is not present

int left = 0;
int right = n-1;
int answer = -1;
while(left<=right){
int middle = (left+right)/2;
    if(nums[middle]>x){
    //keep searching in the left part [left; middle-1]
    right = middle-1;
    } else if (nums[middle] == x){
    //potential answer lets save answer = middle and keep searching in the right part [middle+1; right]
    answer = middle;
    left = middle+1; //here keep searching on the right
    } else { //nums[middle] < x
    //keep searching in the right part [middle + 1; right]
    left = middle +1;

  }
    }
    return answer;