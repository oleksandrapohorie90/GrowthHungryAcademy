23.
procedure is_onto(A, B, function_pairs):
    // Step 1: Initialize a set to keep track of mapped elements in B
    set mapped_elements = empty_set

    // Step 2: Iterate through the function pairs
    for each pair (a, b) in function_pairs:
        // Ensure a is in A and b is in B for valid pairs
        if a is in A and b is in B:
            ADD b TO mapped_elements

    // Step 3: Compare the set of mapped elements to set B
    if mapped_elements is equal to B:
        return true
    else:
        return false

// Example usage
set A = {1, 2, 3}
set B = {4, 5}
List function_pairs = [(1, 4), (2, 5), (3, 4)] // f(1)=4, f(2)=5, f(3)=4

print is_onto(A, B, function_pairs) // Should print True

29.
procedure find a mode(a1,a2....,an: nondecreasing integers)
modecount :=0
i:=1
while<=n
    value:=ai
    count:=1
    while i<=n and ai=value
    count:=count+1
    i:=i+1
if count>modecount then
         modecout := count
         mode:=value
   return mode

37.
procedure enhancedbubblesort(a1,...,an)
i:=1
still_interchanging :=true
while i<n and still_interchanging
        still_interchanging := false
        for j:=1 to n-i
               if aj>aj+1 then
                     still_interchanging :=true
                     interchange aj and aj +1
        i:= i+1
        {a1,....,an is in nondecreasing order}

49.
procedure binary insertion sort(a1,a2,....,an:real numbers with n>=2)
for j:=2 to n
        {binary search for insertion location i}
        left :=1
        right :=j-1
        while left<right
              middle := floor(left+right)/2floor
              if aj >amiddle then left:=middle+1
              else right:= middle
        if aj < aleft then i:=left else i:=left+1
        {insert aj in location i by moving ai through aj-1 toward back of list}
        m:=aj
        for k:=0 to j-i-1
                aj-k:=aj-k-1
        ai :=m
{a1,a2,...,an are sorted}