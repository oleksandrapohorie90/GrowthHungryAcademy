3. Linear Search: Write a function that performs a linear search on an array. The function
   should return the index of the first occurrence of a specified value, or -1 if the value is not
   found

section .text
global linear_search

linear_search: =>The function linear_search takes three parameters: a pointer to the array (in rdi), the length of the array (in rsi), and the value to search for (in rdx).
    ; Inputs:
    ;   rdi = pointer to the array
    ;   rsi = length of the array
    ;   rdx = value to search for
    ; Output:
    ;   rax = index of the first occurrence of the value (or -1 if not found)

    ; Check if the length of the array is 0 =>It checks if the length of the array is 0. If it is, the function returns -1 as the value is not found in an empty array.
    cmp rsi, 0
    jle .not_found  ; If length <= 0, return -1

    ; Loop through the array elements =>If the array length is greater than 0, it loops through the array elements. For each element, it compares it with the value to search.
                                        If the current element is equal to the value, it returns the index of that element.
    xor rcx, rcx  ; Initialize loop counter to 0
.loop:
    mov rbx, [rdi + rcx*4]  ; rbx = current element
    cmp rbx, rdx  ; Compare current element with the value to search
    je .found  ; If equal, value found
    inc rcx  ; Increment loop counter
    cmp rcx, rsi  ; Compare loop counter with array length
    jl .loop  ; Continue looping if not reached the end of the array

.not_found:                           =>If the loop completes without finding the value, the function returns -1 to indicate that the value is not found in the array.
    mov rax, -1  ; Value not found, return -1
    ret

.found:
    mov rax, rcx  ; Value found, return index
    ret