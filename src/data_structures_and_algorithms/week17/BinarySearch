-Binary searching the answer
-Standard(TextBook) application:
1. search space - for ex indexes of the array
int left = 0;
int right = n - 1;

2.while loop and condition untill when binary search is executed, execute till search space is exhausted
while(left<=right) -> there are nums btw left and right, till this interval contains 1 element - we keep searching, when breaks it means binary search is concluded and we have an answer

3. at each step of the binary search, we conclude the middle element in the remaining search space, everything has to do with the middle ELEMENT - based on it you search in left half search pace or right half

THEN THERE ARE 3 MAIN CONDITIONS:
4.
(1)  IF above nums[middle] == X, then WE FOUND IT
   if(nums[middle] == X){
   return middle;
   }
(2)  IF above nums[middle] < X, then start search in the right part => [middle + 1; right] right=n-1(last index) -> our x is bigger than middle
   if ( nums[middle] < X){
   left = middle + 1;
   }
(3)  IF X < nums[middle] above nums, then start search in the left part => [left; middle-1] left=0 -> our x is smaller than middle
    else{
    right = middle - 1;
    }
   }
   return -1; -> in case we couldn't find it

**NOTE: left = middle + 1;/right = middle - 1; -> this is pointing to the index of the number


=> FIND the leftmost entry of number X in a sorted array of numbers
(1) separate answer variable is needed
 IF(nums[middle] > x){
 right = middle - 1
  }

(2) else if nums[middle] == x{
potential answer - need to save answer = middle, keep search in the left part [left; middle -1 ]
answer=middle;
right=middle-1;      -> keep searching on the left

(3) but if nums[middle<x], keep searching in the right part [middle+1; right]
else{
left = middle + 1;
  }
 }
 return answer;         <- index 8 is the answer since it contains num 33 - the most left

 => FIND the rightmost entry of number X in a sorted array of numbers
 (1) separate answer variable is needed
  IF(nums[middle] > x){
  right = middle - 1
   }

 (2) else if nums[middle] == x{
 potential answer - need to save answer = middle, keep search in the left part [left; middle -1 ]
 answer=middle;
 left=middle+1;   -> keep searching on the right

 (3) but if nums[middle<x], keep searching in the right part [middle+1; right]
 else{
 left = middle + 1;
   }
  }
  return answer;         <- index 9 is the answer since it contains num 33 - the most right

Q:
Can you please explain again the difference between Binary searching the answer and Standard(TextBook) application, can tasks be solved with either one approach? And can we go over Capacity To Ship Packages Within D Days, I didnt get it ??

=> if goal find a particular number - binary search and no hard computations, special computations
standard - simple checking mechanism,





